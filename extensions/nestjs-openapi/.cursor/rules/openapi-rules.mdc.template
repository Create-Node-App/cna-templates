---
description: Advanced NestJS OpenAPI patterns for comprehensive API documentation, schema management, validation, authentication, and enterprise-grade API architecture.
globs: '**/*.{ts,js}', '**/swagger.json', '**/openapi.json'
---

# Advanced NestJS OpenAPI Implementation

## Enterprise OpenAPI Architecture

**Comprehensive API documentation with advanced schema management:**
```typescript
import { 
  ApiTags, 
  ApiOperation, 
  ApiResponse, 
  ApiParam, 
  ApiQuery, 
  ApiBody,
  ApiHeader,
  ApiSecurity,
  ApiProperty,
  ApiPropertyOptional,
  ApiHideProperty,
  ApiExtraModels,
  ApiOkResponse,
  ApiCreatedResponse,
  ApiBadRequestResponse,
  ApiUnauthorizedResponse,
  ApiForbiddenResponse,
  ApiNotFoundResponse,
  ApiConflictResponse,
  ApiInternalServerErrorResponse,
  getSchemaPath
} from '@nestjs/swagger'
import { 
  IsString, 
  IsEmail, 
  IsOptional, 
  IsEnum, 
  IsInt, 
  Min, 
  Max, 
  IsArray, 
  ValidateNested,
  IsUUID,
  IsDateString,
  IsBoolean,
  Length,
  Matches
} from 'class-validator'
import { Type, Transform } from 'class-transformer'
import { Controller, Get, Post, Put, Delete, Body, Param, Query, Headers, HttpStatus } from '@nestjs/common'

// ✅ Advanced DTO patterns with comprehensive OpenAPI documentation
export enum UserRole {
  ADMIN = 'admin',
  USER = 'user',
  MODERATOR = 'moderator',
  GUEST = 'guest'
}

export enum UserStatus {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  SUSPENDED = 'suspended',
  PENDING = 'pending'
}

export enum SortOrder {
  ASC = 'asc',
  DESC = 'desc'
}

// ✅ Base response DTOs with proper documentation
export class ApiErrorResponse {
  @ApiProperty({
    description: 'HTTP status code',
    example: 400,
    type: Number
  })
  statusCode: number

  @ApiProperty({
    description: 'Error message describing what went wrong',
    example: 'Validation failed',
    type: String
  })
  message: string

  @ApiProperty({
    description: 'Detailed error information',
    example: ['email must be a valid email address'],
    type: [String],
    required: false
  })
  error?: string[]

  @ApiProperty({
    description: 'Request timestamp',
    example: '2024-01-15T10:30:00Z',
    type: String,
    format: 'date-time'
  })
  timestamp: string

  @ApiProperty({
    description: 'API endpoint path',
    example: '/api/users',
    type: String
  })
  path: string

  @ApiProperty({
    description: 'Unique request identifier for tracking',
    example: 'req_1234567890',
    type: String,
    required: false
  })
  requestId?: string
}

export class PaginationMeta {
  @ApiProperty({
    description: 'Current page number (1-based)',
    example: 1,
    minimum: 1,
    type: Number
  })
  page: number

  @ApiProperty({
    description: 'Number of items per page',
    example: 10,
    minimum: 1,
    maximum: 100,
    type: Number
  })
  limit: number

  @ApiProperty({
    description: 'Total number of items',
    example: 150,
    minimum: 0,
    type: Number
  })
  totalItems: number

  @ApiProperty({
    description: 'Total number of pages',
    example: 15,
    minimum: 0,
    type: Number
  })
  totalPages: number

  @ApiProperty({
    description: 'Whether there is a next page',
    example: true,
    type: Boolean
  })
  hasNext: boolean

  @ApiProperty({
    description: 'Whether there is a previous page',
    example: false,
    type: Boolean
  })
  hasPrev: boolean

  @ApiProperty({
    description: 'URL for the next page',
    example: '/api/users?page=2&limit=10',
    type: String,
    required: false
  })
  nextUrl?: string

  @ApiProperty({
    description: 'URL for the previous page',
    example: '/api/users?page=0&limit=10',
    type: String,
    required: false
  })
  prevUrl?: string
}

// ✅ User profile nested DTOs
export class UserPreferencesDto {
  @ApiProperty({
    description: 'User preferred theme',
    enum: ['light', 'dark', 'auto'],
    example: 'dark',
    default: 'light'
  })
  @IsEnum(['light', 'dark', 'auto'])
  theme: string

  @ApiProperty({
    description: 'User preferred language',
    example: 'en',
    pattern: '^[a-z]{2}$',
    minLength: 2,
    maxLength: 2
  })
  @IsString()
  @Length(2, 2)
  @Matches(/^[a-z]{2}$/, { message: 'Language must be a 2-letter code' })
  language: string

  @ApiProperty({
    description: 'User timezone',
    example: 'UTC',
    type: String
  })
  @IsString()
  timezone: string

  @ApiProperty({
    description: 'Notification preferences',
    type: 'object',
    properties: {
      email: { type: 'boolean', example: true },
      push: { type: 'boolean', example: false },
      sms: { type: 'boolean', example: false }
    }
  })
  notifications: {
    email: boolean
    push: boolean
    sms: boolean
  }

  @ApiProperty({
    description: 'Privacy settings',
    type: 'object',
    properties: {
      profileVisible: { type: 'boolean', example: true },
      activityVisible: { type: 'boolean', example: true },
      contactInfoVisible: { type: 'boolean', example: false }
    }
  })
  privacy: {
    profileVisible: boolean
    activityVisible: boolean
    contactInfoVisible: boolean
  }
}

export class UserProfileDto {
  @ApiProperty({
    description: 'User biography',
    example: 'Full-stack developer with 5+ years experience',
    maxLength: 500,
    required: false
  })
  @IsOptional()
  @IsString()
  @Length(0, 500)
  bio?: string

  @ApiProperty({
    description: 'User location',
    example: 'San Francisco, CA',
    maxLength: 100,
    required: false
  })
  @IsOptional()
  @IsString()
  @Length(0, 100)
  location?: string

  @ApiProperty({
    description: 'User website URL',
    example: 'https://johndoe.dev',
    format: 'uri',
    required: false
  })
  @IsOptional()
  @IsString()
  @Matches(/^https?:\/\//, { message: 'Website must be a valid URL' })
  website?: string

  @ApiProperty({
    description: 'User phone number',
    example: '+1-555-123-4567',
    pattern: '^\\+[1-9]\\d{1,14}$',
    required: false
  })
  @IsOptional()
  @IsString()
  @Matches(/^\+[1-9]\d{1,14}$/, { message: 'Phone must be a valid international format' })
  phone?: string

  @ApiProperty({
    description: 'User company/organization',
    example: 'Tech Corp Inc.',
    maxLength: 100,
    required: false
  })
  @IsOptional()
  @IsString()
  @Length(0, 100)
  company?: string

  @ApiProperty({
    description: 'User job title',
    example: 'Senior Software Engineer',
    maxLength: 100,
    required: false
  })
  @IsOptional()
  @IsString()
  @Length(0, 100)
  jobTitle?: string

  @ApiProperty({
    description: 'User skills and technologies',
    example: ['JavaScript', 'TypeScript', 'React', 'Node.js'],
    type: [String],
    maxItems: 20,
    required: false
  })
  @IsOptional()
  @IsArray()
  @IsString({ each: true })
  skills?: string[]

  @ApiProperty({
    description: 'Social media links',
    type: 'object',
    properties: {
      linkedin: { type: 'string', format: 'uri', example: 'https://linkedin.com/in/johndoe' },
      github: { type: 'string', format: 'uri', example: 'https://github.com/johndoe' },
      twitter: { type: 'string', format: 'uri', example: 'https://twitter.com/johndoe' }
    },
    required: false
  })
  @IsOptional()
  socialLinks?: {
    linkedin?: string
    github?: string
    twitter?: string
  }
}

export class UserStatisticsDto {
  @ApiProperty({
    description: 'Number of projects completed by user',
    example: 42,
    minimum: 0,
    type: Number
  })
  @IsInt()
  @Min(0)
  projectsCompleted: number

  @ApiProperty({
    description: 'Number of tasks completed by user',
    example: 156,
    minimum: 0,
    type: Number
  })
  @IsInt()
  @Min(0)
  tasksCompleted: number

  @ApiProperty({
    description: 'User performance rating',
    example: 4.7,
    minimum: 0,
    maximum: 5,
    type: Number,
    format: 'float'
  })
  @IsInt()
  @Min(0)
  @Max(5)
  averageRating: number

  @ApiProperty({
    description: 'Total work hours logged',
    example: 1240.5,
    minimum: 0,
    type: Number,
    format: 'float'
  })
  totalWorkHours: number

  @ApiProperty({
    description: 'Number of team collaborations',
    example: 23,
    minimum: 0,
    type: Number
  })
  @IsInt()
  @Min(0)
  teamCollaborations: number

  @ApiProperty({
    description: 'User activity streak in days',
    example: 45,
    minimum: 0,
    type: Number
  })
  @IsInt()
  @Min(0)
  activityStreak: number
}

// ✅ Main User DTO with comprehensive documentation
export class UserDto {
  @ApiProperty({
    description: 'Unique user identifier',
    example: '550e8400-e29b-41d4-a716-446655440000',
    format: 'uuid',
    type: String
  })
  @IsUUID()
  id: string

  @ApiProperty({
    description: 'User full name',
    example: 'John Doe',
    minLength: 2,
    maxLength: 100,
    type: String
  })
  @IsString()
  @Length(2, 100, { message: 'Name must be between 2 and 100 characters' })
  name: string

  @ApiProperty({
    description: 'User email address',
    example: 'john.doe@example.com',
    format: 'email',
    type: String
  })
  @IsEmail({}, { message: 'Email must be a valid email address' })
  email: string

  @ApiProperty({
    description: 'User role in the system',
    enum: UserRole,
    example: UserRole.USER,
    enumName: 'UserRole'
  })
  @IsEnum(UserRole, { message: 'Role must be a valid user role' })
  role: UserRole

  @ApiProperty({
    description: 'Current user status',
    enum: UserStatus,
    example: UserStatus.ACTIVE,
    enumName: 'UserStatus'
  })
  @IsEnum(UserStatus, { message: 'Status must be a valid user status' })
  status: UserStatus

  @ApiProperty({
    description: 'User department or team',
    example: 'Engineering',
    maxLength: 50,
    type: String
  })
  @IsString()
  @Length(1, 50)
  department: string

  @ApiProperty({
    description: 'User profile picture URL',
    example: 'https://example.com/avatars/john-doe.jpg',
    format: 'uri',
    required: false
  })
  @IsOptional()
  @IsString()
  avatar?: string

  @ApiProperty({
    description: 'Date when user account was created',
    example: '2024-01-01T00:00:00Z',
    format: 'date-time',
    type: String
  })
  @IsDateString()
  createdAt: string

  @ApiProperty({
    description: 'Date when user account was last updated',
    example: '2024-01-15T10:30:00Z',
    format: 'date-time',
    type: String
  })
  @IsDateString()
  updatedAt: string

  @ApiProperty({
    description: 'Date when user was last active',
    example: '2024-01-15T09:45:00Z',
    format: 'date-time',
    type: String,
    required: false
  })
  @IsOptional()
  @IsDateString()
  lastActiveAt?: string

  @ApiProperty({
    description: 'Whether user email is verified',
    example: true,
    type: Boolean
  })
  @IsBoolean()
  emailVerified: boolean

  @ApiProperty({
    description: 'User profile information',
    type: UserProfileDto,
    required: false
  })
  @IsOptional()
  @ValidateNested()
  @Type(() => UserProfileDto)
  profile?: UserProfileDto

  @ApiProperty({
    description: 'User preferences and settings',
    type: UserPreferencesDto,
    required: false
  })
  @IsOptional()
  @ValidateNested()
  @Type(() => UserPreferencesDto)
  preferences?: UserPreferencesDto

  @ApiProperty({
    description: 'User statistics and metrics',
    type: UserStatisticsDto,
    required: false
  })
  @IsOptional()
  @ValidateNested()
  @Type(() => UserStatisticsDto)
  statistics?: UserStatisticsDto

  @ApiHideProperty()
  @IsOptional()
  password?: string // Hidden from API documentation

  @ApiProperty({
    description: 'User permissions list',
    example: ['read:users', 'write:projects', 'admin:system'],
    type: [String],
    required: false
  })
  @IsOptional()
  @IsArray()
  @IsString({ each: true })
  permissions?: string[]
}

// ✅ Input DTOs for creation and updates
export class CreateUserDto {
  @ApiProperty({
    description: 'User full name',
    example: 'Jane Smith',
    minLength: 2,
    maxLength: 100
  })
  @IsString()
  @Length(2, 100)
  name: string

  @ApiProperty({
    description: 'User email address',
    example: 'jane.smith@example.com',
    format: 'email'
  })
  @IsEmail()
  email: string

  @ApiProperty({
    description: 'User password',
    example: 'SecureP@ssw0rd123',
    minLength: 8,
    maxLength: 128,
    pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]',
    format: 'password'
  })
  @IsString()
  @Length(8, 128)
  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/, {
    message: 'Password must contain uppercase, lowercase, number and special character'
  })
  password: string

  @ApiProperty({
    description: 'User role in the system',
    enum: UserRole,
    example: UserRole.USER,
    default: UserRole.USER
  })
  @IsEnum(UserRole)
  role: UserRole = UserRole.USER

  @ApiProperty({
    description: 'User department or team',
    example: 'Marketing',
    maxLength: 50
  })
  @IsString()
  @Length(1, 50)
  department: string

  @ApiPropertyOptional({
    description: 'User profile information',
    type: UserProfileDto
  })
  @IsOptional()
  @ValidateNested()
  @Type(() => UserProfileDto)
  profile?: UserProfileDto

  @ApiPropertyOptional({
    description: 'User preferences and settings',
    type: UserPreferencesDto
  })
  @IsOptional()
  @ValidateNested()
  @Type(() => UserPreferencesDto)
  preferences?: UserPreferencesDto
}

export class UpdateUserDto {
  @ApiPropertyOptional({
    description: 'User full name',
    example: 'Jane Smith Updated',
    minLength: 2,
    maxLength: 100
  })
  @IsOptional()
  @IsString()
  @Length(2, 100)
  name?: string

  @ApiPropertyOptional({
    description: 'User email address',
    example: 'jane.updated@example.com',
    format: 'email'
  })
  @IsOptional()
  @IsEmail()
  email?: string

  @ApiPropertyOptional({
    description: 'User role in the system',
    enum: UserRole,
    example: UserRole.MODERATOR
  })
  @IsOptional()
  @IsEnum(UserRole)
  role?: UserRole

  @ApiPropertyOptional({
    description: 'Current user status',
    enum: UserStatus,
    example: UserStatus.ACTIVE
  })
  @IsOptional()
  @IsEnum(UserStatus)
  status?: UserStatus

  @ApiPropertyOptional({
    description: 'User department or team',
    example: 'Engineering',
    maxLength: 50
  })
  @IsOptional()
  @IsString()
  @Length(1, 50)
  department?: string

  @ApiPropertyOptional({
    description: 'User profile picture URL',
    example: 'https://example.com/avatars/jane-updated.jpg',
    format: 'uri'
  })
  @IsOptional()
  @IsString()
  avatar?: string

  @ApiPropertyOptional({
    description: 'User profile information',
    type: UserProfileDto
  })
  @IsOptional()
  @ValidateNested()
  @Type(() => UserProfileDto)
  profile?: UserProfileDto

  @ApiPropertyOptional({
    description: 'User preferences and settings',
    type: UserPreferencesDto
  })
  @IsOptional()
  @ValidateNested()
  @Type(() => UserPreferencesDto)
  preferences?: UserPreferencesDto
}

// ✅ Query DTOs for filtering and pagination
export class UserQueryDto {
  @ApiPropertyOptional({
    description: 'Page number for pagination (1-based)',
    example: 1,
    minimum: 1,
    default: 1,
    type: Number
  })
  @IsOptional()
  @IsInt()
  @Min(1)
  @Type(() => Number)
  page?: number = 1

  @ApiPropertyOptional({
    description: 'Number of items per page',
    example: 10,
    minimum: 1,
    maximum: 100,
    default: 10,
    type: Number
  })
  @IsOptional()
  @IsInt()
  @Min(1)
  @Max(100)
  @Type(() => Number)
  limit?: number = 10

  @ApiPropertyOptional({
    description: 'Search term to filter users by name or email',
    example: 'john',
    maxLength: 100
  })
  @IsOptional()
  @IsString()
  @Length(0, 100)
  search?: string

  @ApiPropertyOptional({
    description: 'Filter by user role',
    enum: UserRole,
    example: UserRole.USER
  })
  @IsOptional()
  @IsEnum(UserRole)
  role?: UserRole

  @ApiPropertyOptional({
    description: 'Filter by user status',
    enum: UserStatus,
    example: UserStatus.ACTIVE
  })
  @IsOptional()
  @IsEnum(UserStatus)
  status?: UserStatus

  @ApiPropertyOptional({
    description: 'Filter by department',
    example: 'Engineering',
    maxLength: 50
  })
  @IsOptional()
  @IsString()
  @Length(0, 50)
  department?: string

  @ApiPropertyOptional({
    description: 'Field to sort by',
    example: 'name',
    enum: ['name', 'email', 'role', 'status', 'department', 'createdAt', 'updatedAt', 'lastActiveAt']
  })
  @IsOptional()
  @IsEnum(['name', 'email', 'role', 'status', 'department', 'createdAt', 'updatedAt', 'lastActiveAt'])
  sortBy?: string = 'createdAt'

  @ApiPropertyOptional({
    description: 'Sort order',
    example: 'desc',
    enum: SortOrder,
    default: SortOrder.DESC
  })
  @IsOptional()
  @IsEnum(SortOrder)
  sortOrder?: SortOrder = SortOrder.DESC

  @ApiPropertyOptional({
    description: 'Filter by creation date range (start)',
    example: '2024-01-01T00:00:00Z',
    format: 'date-time'
  })
  @IsOptional()
  @IsDateString()
  createdAfter?: string

  @ApiPropertyOptional({
    description: 'Filter by creation date range (end)',
    example: '2024-12-31T23:59:59Z',
    format: 'date-time'
  })
  @IsOptional()
  @IsDateString()
  createdBefore?: string

  @ApiPropertyOptional({
    description: 'Filter by email verification status',
    example: true,
    type: Boolean
  })
  @IsOptional()
  @IsBoolean()
  @Transform(({ value }) => {
    if (value === 'true') return true
    if (value === 'false') return false
    return value
  })
  emailVerified?: boolean
}

// ✅ Response DTOs with pagination
export class PaginatedUsersResponse {
  @ApiProperty({
    description: 'List of users',
    type: [UserDto]
  })
  data: UserDto[]

  @ApiProperty({
    description: 'Pagination metadata',
    type: PaginationMeta
  })
  meta: PaginationMeta

  @ApiProperty({
    description: 'Response timestamp',
    example: '2024-01-15T10:30:00Z',
    format: 'date-time'
  })
  timestamp: string

  @ApiProperty({
    description: 'Request processing time in milliseconds',
    example: 245,
    type: Number
  })
  processingTime: number
}

export class UserResponse {
  @ApiProperty({
    description: 'User data',
    type: UserDto
  })
  data: UserDto

  @ApiProperty({
    description: 'Response timestamp',
    example: '2024-01-15T10:30:00Z',
    format: 'date-time'
  })
  timestamp: string

  @ApiProperty({
    description: 'Request processing time in milliseconds',
    example: 123,
    type: Number
  })
  processingTime: number
}

// ✅ Bulk operations DTOs
export class BulkUserUpdateDto {
  @ApiProperty({
    description: 'List of user IDs to update',
    example: ['550e8400-e29b-41d4-a716-446655440000', '660f9500-f39c-52e5-b827-557766551111'],
    type: [String],
    minItems: 1,
    maxItems: 100
  })
  @IsArray()
  @IsUUID('4', { each: true })
  @Type(() => String)
  userIds: string[]

  @ApiProperty({
    description: 'Fields to update for all selected users',
    type: UpdateUserDto
  })
  @ValidateNested()
  @Type(() => UpdateUserDto)
  updates: UpdateUserDto

  @ApiPropertyOptional({
    description: 'Reason for bulk update (for audit trail)',
    example: 'Department restructuring',
    maxLength: 255
  })
  @IsOptional()
  @IsString()
  @Length(0, 255)
  reason?: string
}

export class BulkOperationResult {
  @ApiProperty({
    description: 'Number of users successfully updated',
    example: 15,
    type: Number
  })
  successCount: number

  @ApiProperty({
    description: 'Number of users that failed to update',
    example: 2,
    type: Number
  })
  failureCount: number

  @ApiProperty({
    description: 'List of user IDs that were successfully updated',
    example: ['550e8400-e29b-41d4-a716-446655440000'],
    type: [String]
  })
  successfulUserIds: string[]

  @ApiProperty({
    description: 'List of errors for failed operations',
    type: 'array',
    items: {
      type: 'object',
      properties: {
        userId: { type: 'string', example: '660f9500-f39c-52e5-b827-557766551111' },
        error: { type: 'string', example: 'User not found' }
      }
    }
  })
  errors: Array<{ userId: string; error: string }>

  @ApiProperty({
    description: 'Operation execution time in milliseconds',
    example: 1250,
    type: Number
  })
  executionTime: number
}

// ✅ Advanced controller with comprehensive OpenAPI documentation
@ApiTags('Users')
@ApiExtraModels(UserDto, CreateUserDto, UpdateUserDto, PaginatedUsersResponse, UserResponse, ApiErrorResponse)
@Controller('users')
export class UsersController {
  
  @Get()
  @ApiOperation({
    summary: 'Get all users with filtering and pagination',
    description: `
      Retrieve a paginated list of users with optional filtering and sorting capabilities.
      
      **Features:**
      - Pagination with configurable page size
      - Search by name or email
      - Filter by role, status, department
      - Sort by multiple fields
      - Date range filtering
      - Email verification status filtering
      
      **Performance:**
      - Results are cached for 5 minutes
      - Maximum 100 items per page
      - Optimized database queries with proper indexing
    `,
    tags: ['Users']
  })
  @ApiQuery({ 
    name: 'page', 
    required: false, 
    type: Number, 
    description: 'Page number (1-based)', 
    example: 1 
  })
  @ApiQuery({ 
    name: 'limit', 
    required: false, 
    type: Number, 
    description: 'Items per page (max 100)', 
    example: 10 
  })
  @ApiQuery({ 
    name: 'search', 
    required: false, 
    type: String, 
    description: 'Search term for name/email', 
    example: 'john' 
  })
  @ApiQuery({ 
    name: 'role', 
    required: false, 
    enum: UserRole, 
    description: 'Filter by user role' 
  })
  @ApiQuery({ 
    name: 'status', 
    required: false, 
    enum: UserStatus, 
    description: 'Filter by user status' 
  })
  @ApiQuery({ 
    name: 'department', 
    required: false, 
    type: String, 
    description: 'Filter by department' 
  })
  @ApiQuery({ 
    name: 'sortBy', 
    required: false, 
    type: String, 
    description: 'Field to sort by',
    example: 'createdAt'
  })
  @ApiQuery({ 
    name: 'sortOrder', 
    required: false, 
    enum: SortOrder, 
    description: 'Sort direction' 
  })
  @ApiHeader({
    name: 'Authorization',
    description: 'Bearer JWT token',
    required: true,
    example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
  })
  @ApiSecurity('bearer')
  @ApiOkResponse({
    description: 'Users retrieved successfully',
    type: PaginatedUsersResponse,
    schema: {
      example: {
        data: [{
          id: '550e8400-e29b-41d4-a716-446655440000',
          name: 'John Doe',
          email: 'john.doe@example.com',
          role: 'user',
          status: 'active',
          department: 'Engineering',
          createdAt: '2024-01-01T00:00:00Z',
          updatedAt: '2024-01-15T10:30:00Z',
          emailVerified: true
        }],
        meta: {
          page: 1,
          limit: 10,
          totalItems: 150,
          totalPages: 15,
          hasNext: true,
          hasPrev: false
        },
        timestamp: '2024-01-15T10:30:00Z',
        processingTime: 245
      }
    }
  })
  @ApiBadRequestResponse({
    description: 'Invalid query parameters',
    type: ApiErrorResponse,
    schema: {
      example: {
        statusCode: 400,
        message: 'Validation failed',
        error: ['page must be a positive number', 'limit must not exceed 100'],
        timestamp: '2024-01-15T10:30:00Z',
        path: '/api/users',
        requestId: 'req_1234567890'
      }
    }
  })
  @ApiUnauthorizedResponse({
    description: 'Invalid or missing authentication token',
    type: ApiErrorResponse
  })
  @ApiForbiddenResponse({
    description: 'Insufficient permissions to access users',
    type: ApiErrorResponse
  })
  @ApiInternalServerErrorResponse({
    description: 'Internal server error',
    type: ApiErrorResponse
  })
  async findAll(@Query() query: UserQueryDto): Promise<PaginatedUsersResponse> {
    // Implementation would go here
    throw new Error('Method not implemented.')
  }

  @Get(':id')
  @ApiOperation({
    summary: 'Get user by ID',
    description: `
      Retrieve a specific user by their unique identifier.
      
      **Features:**
      - Detailed user information including profile and preferences
      - Statistics and metrics (if available)
      - Permission-based field visibility
      
      **Access Control:**
      - Users can view their own profile
      - Admins and moderators can view any user profile
      - Guest access is limited to public profile information
    `
  })
  @ApiParam({
    name: 'id',
    description: 'User unique identifier',
    type: String,
    format: 'uuid',
    example: '550e8400-e29b-41d4-a716-446655440000'
  })
  @ApiHeader({
    name: 'Authorization',
    description: 'Bearer JWT token',
    required: true
  })
  @ApiSecurity('bearer')
  @ApiOkResponse({
    description: 'User retrieved successfully',
    type: UserResponse,
    schema: {
      example: {
        data: {
          id: '550e8400-e29b-41d4-a716-446655440000',
          name: 'John Doe',
          email: 'john.doe@example.com',
          role: 'user',
          status: 'active',
          department: 'Engineering',
          avatar: 'https://example.com/avatars/john-doe.jpg',
          createdAt: '2024-01-01T00:00:00Z',
          updatedAt: '2024-01-15T10:30:00Z',
          lastActiveAt: '2024-01-15T09:45:00Z',
          emailVerified: true,
          profile: {
            bio: 'Full-stack developer with 5+ years experience',
            location: 'San Francisco, CA',
            website: 'https://johndoe.dev',
            skills: ['JavaScript', 'TypeScript', 'React', 'Node.js']
          },
          statistics: {
            projectsCompleted: 42,
            tasksCompleted: 156,
            averageRating: 4.7,
            totalWorkHours: 1240.5
          }
        },
        timestamp: '2024-01-15T10:30:00Z',
        processingTime: 123
      }
    }
  })
  @ApiBadRequestResponse({
    description: 'Invalid user ID format',
    type: ApiErrorResponse
  })
  @ApiUnauthorizedResponse({
    description: 'Authentication required',
    type: ApiErrorResponse
  })
  @ApiNotFoundResponse({
    description: 'User not found',
    type: ApiErrorResponse
  })
  async findOne(@Param('id') id: string): Promise<UserResponse> {
    throw new Error('Method not implemented.')
  }

  @Post()
  @ApiOperation({
    summary: 'Create a new user',
    description: `
      Create a new user account with comprehensive profile information.
      
      **Features:**
      - Automatic password hashing and security
      - Email verification workflow
      - Role-based permission assignment
      - Profile and preference initialization
      
      **Validation:**
      - Email uniqueness check
      - Strong password requirements
      - Department validation
      - Profile data sanitization
      
      **Workflows:**
      - Welcome email sent to new user
      - Audit log entry created
      - Department notifications (if applicable)
    `
  })
  @ApiBody({
    description: 'User creation data',
    type: CreateUserDto,
    examples: {
      basic: {
        summary: 'Basic user creation',
        value: {
          name: 'Jane Smith',
          email: 'jane.smith@example.com',
          password: 'SecureP@ssw0rd123',
          role: 'user',
          department: 'Marketing'
        }
      },
      detailed: {
        summary: 'User with profile information',
        value: {
          name: 'John Developer',
          email: 'john@techcorp.com',
          password: 'MySecureP@ss123',
          role: 'user',
          department: 'Engineering',
          profile: {
            bio: 'Experienced full-stack developer',
            location: 'Remote, USA',
            skills: ['JavaScript', 'Python', 'Docker'],
            socialLinks: {
              github: 'https://github.com/johndeveloper'
            }
          },
          preferences: {
            theme: 'dark',
            language: 'en',
            timezone: 'UTC',
            notifications: {
              email: true,
              push: false,
              sms: false
            }
          }
        }
      }
    }
  })
  @ApiCreatedResponse({
    description: 'User created successfully',
    type: UserResponse,
    headers: {
      Location: {
        description: 'URL of the created user',
        schema: { type: 'string', example: '/api/users/550e8400-e29b-41d4-a716-446655440000' }
      }
    }
  })
  @ApiBadRequestResponse({
    description: 'Validation error or email already exists',
    type: ApiErrorResponse,
    schema: {
      example: {
        statusCode: 400,
        message: 'Validation failed',
        error: [
          'email must be a valid email address',
          'password must contain uppercase, lowercase, number and special character',
          'Email already exists'
        ],
        timestamp: '2024-01-15T10:30:00Z',
        path: '/api/users'
      }
    }
  })
  @ApiConflictResponse({
    description: 'Email address already in use',
    type: ApiErrorResponse
  })
  async create(@Body() createUserDto: CreateUserDto): Promise<UserResponse> {
    throw new Error('Method not implemented.')
  }

  @Put(':id')
  @ApiOperation({
    summary: 'Update user by ID',
    description: `
      Update an existing user's information with partial or complete data.
      
      **Features:**
      - Partial updates supported
      - Version conflict detection
      - Audit trail logging
      - Real-time validation
      
      **Access Control:**
      - Users can update their own basic information
      - Admins can update any user's information
      - Role changes require special permissions
      - Status changes trigger workflow notifications
    `
  })
  @ApiParam({
    name: 'id',
    description: 'User unique identifier to update',
    type: String,
    format: 'uuid'
  })
  @ApiBody({
    description: 'User update data (partial)',
    type: UpdateUserDto,
    examples: {
      profile: {
        summary: 'Update profile information',
        value: {
          profile: {
            bio: 'Updated biography',
            location: 'New York, NY',
            skills: ['JavaScript', 'TypeScript', 'React', 'Vue.js']
          }
        }
      },
      status: {
        summary: 'Change user status',
        value: {
          status: 'suspended',
          role: 'guest'
        }
      }
    }
  })
  @ApiOkResponse({
    description: 'User updated successfully',
    type: UserResponse
  })
  @ApiBadRequestResponse({
    description: 'Invalid update data or user ID',
    type: ApiErrorResponse
  })
  @ApiUnauthorizedResponse({
    description: 'Authentication required',
    type: ApiErrorResponse
  })
  @ApiForbiddenResponse({
    description: 'Insufficient permissions to update user',
    type: ApiErrorResponse
  })
  @ApiNotFoundResponse({
    description: 'User not found',
    type: ApiErrorResponse
  })
  @ApiConflictResponse({
    description: 'Email already in use by another user',
    type: ApiErrorResponse
  })
  async update(
    @Param('id') id: string,
    @Body() updateUserDto: UpdateUserDto
  ): Promise<UserResponse> {
    throw new Error('Method not implemented.')
  }

  @Delete(':id')
  @ApiOperation({
    summary: 'Delete user by ID',
    description: `
      Permanently delete a user account and all associated data.
      
      **Features:**
      - Soft delete with recovery option (first 30 days)
      - Data anonymization for compliance
      - Cascade deletion of related records
      - Audit trail preservation
      
      **Access Control:**
      - Only admins can delete users
      - Super admin role required for admin deletion
      - Self-deletion available with confirmation
      
      **Data Handling:**
      - Personal data is anonymized
      - Work history is preserved for business continuity
      - Files and documents are archived
    `
  })
  @ApiParam({
    name: 'id',
    description: 'User unique identifier to delete',
    type: String,
    format: 'uuid'
  })
  @ApiQuery({
    name: 'permanent',
    required: false,
    type: Boolean,
    description: 'Whether to permanently delete (skip soft delete)',
    example: false
  })
  @ApiHeader({
    name: 'Authorization',
    description: 'Bearer JWT token with admin privileges',
    required: true
  })
  @ApiResponse({
    status: HttpStatus.NO_CONTENT,
    description: 'User deleted successfully'
  })
  @ApiBadRequestResponse({
    description: 'Invalid user ID format',
    type: ApiErrorResponse
  })
  @ApiUnauthorizedResponse({
    description: 'Authentication required',
    type: ApiErrorResponse
  })
  @ApiForbiddenResponse({
    description: 'Insufficient permissions to delete user',
    type: ApiErrorResponse
  })
  @ApiNotFoundResponse({
    description: 'User not found',
    type: ApiErrorResponse
  })
  async remove(
    @Param('id') id: string,
    @Query('permanent') permanent?: boolean
  ): Promise<void> {
    throw new Error('Method not implemented.')
  }

  @Post('bulk-update')
  @ApiOperation({
    summary: 'Bulk update multiple users',
    description: `
      Update multiple users at once with the same changes.
      
      **Features:**
      - Atomic operations (all succeed or all fail)
      - Progress tracking for large batches
      - Detailed error reporting per user
      - Performance optimization for bulk operations
      
      **Limitations:**
      - Maximum 100 users per batch
      - Only specific fields can be bulk updated
      - Requires admin privileges
    `
  })
  @ApiBody({
    description: 'Bulk update data',
    type: BulkUserUpdateDto,
    examples: {
      department: {
        summary: 'Department restructuring',
        value: {
          userIds: [
            '550e8400-e29b-41d4-a716-446655440000',
            '660f9500-f39c-52e5-b827-557766551111'
          ],
          updates: {
            department: 'New Engineering Division',
            role: 'user'
          },
          reason: 'Department restructuring Q1 2024'
        }
      }
    }
  })
  @ApiOkResponse({
    description: 'Bulk operation completed',
    type: BulkOperationResult,
    schema: {
      example: {
        successCount: 15,
        failureCount: 2,
        successfulUserIds: ['550e8400-e29b-41d4-a716-446655440000'],
        errors: [
          {
            userId: '660f9500-f39c-52e5-b827-557766551111',
            error: 'User not found'
          }
        ],
        executionTime: 1250
      }
    }
  })
  @ApiBadRequestResponse({
    description: 'Invalid bulk update data',
    type: ApiErrorResponse
  })
  @ApiUnauthorizedResponse({
    description: 'Authentication required',
    type: ApiErrorResponse
  })
  @ApiForbiddenResponse({
    description: 'Admin privileges required',
    type: ApiErrorResponse
  })
  async bulkUpdate(@Body() bulkUpdateDto: BulkUserUpdateDto): Promise<BulkOperationResult> {
    throw new Error('Method not implemented.')
  }
}
```

## Best Practices Summary

**Key patterns for advanced NestJS OpenAPI implementation:**

1. **Comprehensive Documentation**: Use detailed descriptions, examples, and schema definitions for all endpoints, include operation summaries and detailed explanations.

2. **Advanced DTOs**: Implement nested DTOs with proper validation, use enums for constrained values, provide clear property documentation with examples.

3. **Response Modeling**: Define consistent response structures, implement proper error response schemas, use appropriate HTTP status codes.

4. **Query Parameters**: Document all query parameters with examples, implement proper validation and transformation, provide clear parameter descriptions.

5. **Security Documentation**: Document authentication requirements, define security schemes properly, specify required permissions and access levels.

6. **Validation Integration**: Combine class-validator with OpenAPI decorators, provide meaningful validation messages, implement custom validation rules.

7. **Schema Management**: Use @ApiExtraModels for complex schemas, implement proper inheritance patterns, maintain schema consistency across endpoints.

8. **Performance Considerations**: Document caching strategies, specify rate limiting, include performance characteristics in operation descriptions.

Always maintain consistency in documentation style, keep schemas up-to-date with implementation changes, provide comprehensive examples for complex operations, and ensure proper error handling documentation for robust API development.

## Documentation

1. Use proper API descriptions
2. Implement proper examples
3. Use appropriate tags
4. Handle deprecated endpoints
5. Maintain documentation up to date 
---
description: You are an expert programming assistant that specializes in implementing and managing state with Easy State in React applications.
globs: '**/*.{ts,tsx,js,jsx}'
---

# Easy State Rules

You are an expert in Easy State and follow these guidelines:

1. Always use TypeScript for type safety and better developer experience.
2. Create stores with clear, descriptive names and organize them by feature/domain.
3. Use the `store` function with proper typing and avoid direct state mutations.
4. Implement selectors for derived state and memoize them when necessary.
5. Handle async actions inside the store using proper error handling.
6. Use proper state splitting to avoid unnecessary re-renders.
7. Follow the single responsibility principle for each store.
8. Document store behavior with JSDoc or TypeScript types.
9. Implement proper error boundaries and loading states.
10. Use proper state subscriptions to optimize performance.

## Anti-Patterns to Avoid

1. Never use Easy State for server state (use React Query or SWR instead).
2. Avoid putting all app state in a single store.
3. Don't store large, frequently-changing collections unless necessary.
4. Avoid side effects inside store definitions.
5. Don't mirror backend state without transformation.

## Example Implementation

```ts
import { store } from '@risingstack/easy-state';

interface AuthState {
  user: User | null;
  error: string | null;
  login: (user: User) => void;
  logout: () => void;
  setError: (error: string) => void;
}

export const authStore = store<AuthState>({
  user: null,
  error: null,
  login: (user) => {
    authStore.user = user;
    authStore.error = null;
  },
  logout: () => {
    authStore.user = null;
    authStore.error = null;
  },
  setError: (error) => {
    authStore.error = error;
  },
}); 
---
description: You are an expert programming assistant that specializes in implementing and using Serverless with NestJS applications.
globs: '**/*.{ts,js}'
---

# Serverless Rules

You are an expert in Serverless and follow these guidelines:

1. Always use TypeScript for type safety and better developer experience.
2. Create functions with clear, descriptive names and organize them by feature/domain.
3. Use Serverless's configuration with proper TypeScript support.
4. Leverage Serverless's event handling for complex workflows.
5. Use Serverless's environment variables for configuration.
6. Follow Serverless's best practices for performance.
7. Document function behavior with JSDoc or TypeScript types.
8. Implement proper error handling and validation.
9. Use proper dependency injection and avoid tight coupling.
10. Follow AWS best practices for serverless architecture.

## Anti-Patterns to Avoid

1. Never use Serverless without proper configuration.
2. Avoid using Serverless for complex, custom workflows.
3. Don't use Serverless for performance-critical operations.
4. Avoid using Serverless for complex transactions.
5. Don't use Serverless for complex, custom indexes.

## Example Implementation

```tsx
import { Injectable } from '@nestjs/common';
import { Handler, Context } from 'aws-lambda';
import { ServerlessService } from './serverless.service';

@Injectable()
export class ServerlessController {
  constructor(private readonly serverlessService: ServerlessService) {}

  // Example HTTP handler
  public handler: Handler = async (event: any, context: Context) => {
    try {
      const result = await this.serverlessService.processEvent(event);
      return {
        statusCode: 200,
        body: JSON.stringify(result),
      };
    } catch (error) {
      return {
        statusCode: 500,
        body: JSON.stringify({ error: error.message }),
      };
    }
  };

  // Example SQS handler
  public sqsHandler: Handler = async (event: any, context: Context) => {
    try {
      const messages = event.Records.map(record => ({
        messageId: record.messageId,
        body: JSON.parse(record.body),
      }));

      await this.serverlessService.processMessages(messages);
      return {
        statusCode: 200,
        body: JSON.stringify({ message: 'Messages processed successfully' }),
      };
    } catch (error) {
      return {
        statusCode: 500,
        body: JSON.stringify({ error: error.message }),
      };
    }
  };

  // Example S3 handler
  public s3Handler: Handler = async (event: any, context: Context) => {
    try {
      const records = event.Records.map(record => ({
        bucket: record.s3.bucket.name,
        key: record.s3.object.key,
        size: record.s3.object.size,
      }));

      await this.serverlessService.processS3Records(records);
      return {
        statusCode: 200,
        body: JSON.stringify({ message: 'S3 records processed successfully' }),
      };
    } catch (error) {
      return {
        statusCode: 500,
        body: JSON.stringify({ error: error.message }),
      };
    }
  };
}

// Example service
@Injectable()
export class ServerlessService {
  async processEvent(event: any): Promise<any> {
    // Process the event
    return { message: 'Event processed successfully' };
  }

  async processMessages(messages: any[]): Promise<void> {
    // Process the messages
    for (const message of messages) {
      await this.processMessage(message);
    }
  }

  async processS3Records(records: any[]): Promise<void> {
    // Process the S3 records
    for (const record of records) {
      await this.processS3Record(record);
    }
  }

  private async processMessage(message: any): Promise<void> {
    // Process a single message
  }

  private async processS3Record(record: any): Promise<void> {
    // Process a single S3 record
  }
} 
---
description: You are an expert programming assistant that specializes in implementing and using Material UI components in React applications.
globs: '**/*.{ts,tsx,js,jsx}'
---

# Material UI Rules

You are an expert in Material UI and follow these guidelines:

1. Always use TypeScript for type safety and better developer experience.
2. Create components with clear, descriptive names and organize them by feature/domain.
3. Use Material UI's theming system with proper TypeScript support.
4. Leverage Material UI's responsive utilities for mobile-first design.
5. Use Material UI's color system with proper dark mode support.
6. Follow Material Design principles for consistent UX.
7. Document component behavior with JSDoc or TypeScript types.
8. Implement proper error boundaries and loading states.
9. Use proper component composition and avoid prop drilling.
10. Follow accessibility best practices (WCAG 2.1).

## Anti-Patterns to Avoid

1. Never use Material UI components without proper theming setup.
2. Avoid using Material UI components for complex, custom UI elements.
3. Don't use Material UI components for performance-critical UI elements.
4. Avoid using Material UI components for complex animations.
5. Don't use Material UI components for complex, custom layouts.

## Example Implementation

```tsx
import React from 'react';
import { 
  Card, 
  CardMedia, 
  CardContent, 
  Typography, 
  Button,
  CircularProgress,
  useTheme
} from '@mui/material';

interface ProductCardProps {
  product: Product;
  onAddToCart: (product: Product) => void;
  isLoading?: boolean;
}

export const ProductCard: React.FC<ProductCardProps> = ({ 
  product, 
  onAddToCart,
  isLoading = false 
}) => {
  const theme = useTheme();

  return (
    <Card 
      sx={{ 
        maxWidth: 345,
        transition: theme.transitions.create('box-shadow'),
        '&:hover': {
          boxShadow: theme.shadows[4]
        }
      }}
    >
      <CardMedia
        component="img"
        height="140"
        image={product.image}
        alt={product.name}
      />
      <CardContent>
        <Typography gutterBottom variant="h5" component="div">
          {product.name}
        </Typography>
        <Typography variant="body2" color="text.secondary">
          {product.description}
        </Typography>
      </CardContent>
      <CardContent>
        {isLoading ? (
          <CircularProgress size={24} />
        ) : (
          <Button 
            variant="contained" 
            onClick={() => onAddToCart(product)}
            aria-label={`Add ${product.name} to cart`}
          >
            Add to Cart
          </Button>
        )}
      </CardContent>
    </Card>
  );
};
``` 
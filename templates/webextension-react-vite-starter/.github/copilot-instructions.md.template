# GitHub Copilot Instructions for WebExtension React Vite Project

## Core Guidelines

1. **Check Documentation First**
   - Always reference the `docs/` folder for technology-specific guides and patterns
   - Follow the README.md for setup, testing, and development instructions
   - Consult official documentation when uncertain

2. **Code Quality**
   - Run `npm run format` to format code automatically
   - Run `npm run lint:fix` to fix linting issues
   - Keep code clean, typed, and well-structured
   - Use TypeScript properly and avoid `any` types

3. **Project Structure**
   - Follow the established WebExtension architecture
   - Check `docs/PROJECT_STRUCTURE.md` for organization patterns
   - Separate background, content, popup, and options scripts properly
   - Keep extension contexts isolated and well-defined

4. **Development Workflow**
   - Test changes using the commands in README.md
   - Follow the project's established patterns and conventions
   - Reference existing code for consistency
   - Use browser extension development tools

5. **Best Practices**
   - Write clean, readable, and maintainable code
   - Use proper error handling and validation
   - Follow React, Vite, and WebExtension best practices
   - Implement proper message passing between contexts

## When Suggesting Code

1. **Extension Architecture**
   - Check if similar patterns exist in the codebase
   - Look for relevant guides in the `docs/` folder
   - Follow established patterns for background, content, and popup scripts
   - Use proper manifest.json configuration
   - Implement appropriate permissions and CSP

2. **Message Passing**
   - Use proper communication between extension contexts
   - Follow established patterns for background-content communication
   - Implement proper error handling for async messaging
   - Use TypeScript interfaces for message types

3. **Content Scripts**
   - Implement proper DOM manipulation patterns
   - Follow established patterns for page interaction
   - Use proper injection strategies
   - Handle dynamic content appropriately

4. **Background Scripts**
   - Follow service worker patterns for Manifest V3
   - Implement proper event handling
   - Use proper storage and state management
   - Handle extension lifecycle appropriately

5. **UI Components**
   - Use React patterns for popup and options pages
   - Follow established styling approaches
   - Implement responsive design for different contexts
   - Use proper state management for UI

## WebExtension Specific

- Follow Manifest V3 best practices
- Use proper Chrome/Firefox extension APIs
- Implement proper security measures (CSP, permissions)
- Handle cross-browser compatibility when needed
- Use proper storage APIs (chrome.storage)
- Implement proper error boundaries for extension contexts
- Follow extension store guidelines for distribution

# GitHub Copilot Instructions for Turborepo Monorepo

## Core Guidelines

1. **Check Documentation First**
   - Always reference the `docs/` folder for technology-specific guides and patterns
   - Follow the README.md for setup, testing, and development instructions
   - Consult official documentation when uncertain

2. **Code Quality**
   - Run `npm run format` to format code automatically
   - Run `npm run lint:fix` to fix linting issues
   - Keep code clean, typed, and well-structured
   - Use TypeScript properly and avoid `any` types

3. **Monorepo Structure**
   - Follow the established package organization in `apps/` and `packages/`
   - Check `docs/PROJECT_STRUCTURE.md` for monorepo patterns
   - Keep packages focused and well-defined
   - Use workspace dependencies appropriately

4. **Development Workflow**
   - Test changes using the commands in README.md
   - Follow the project's established patterns and conventions
   - Reference existing code for consistency
   - Use Turborepo's caching and task orchestration

5. **Best Practices**
   - Write clean, readable, and maintainable code
   - Use proper error handling and validation
   - Follow monorepo best practices for scalability
   - Implement proper package dependencies

## When Suggesting Code

1. **Package Creation**
   - Check if similar packages exist in the monorepo
   - Look for relevant guides in the `docs/` folder
   - Follow established package structure patterns
   - Use proper package.json configuration
   - Implement appropriate build and export patterns

2. **Dependency Management**
   - Use workspace dependencies for internal packages
   - Follow established patterns for external dependencies
   - Avoid duplicate dependencies across packages
   - Use proper versioning strategies

3. **Shared Code**
   - Create reusable packages in `packages/` directory
   - Follow established patterns for shared components
   - Implement proper TypeScript exports
   - Use consistent naming conventions

4. **App Development**
   - Place applications in `apps/` directory
   - Use shared packages appropriately
   - Follow established patterns for each app type
   - Implement proper build configurations

5. **Build & Development**
   - Use Turborepo's task pipelines effectively
   - Implement proper caching strategies
   - Follow established build patterns
   - Use remote caching when configured

## Turborepo Specific

- Leverage Turborepo's parallel execution and caching
- Use proper task dependencies in turbo.json
- Implement incremental builds effectively
- Follow workspace patterns for package dependencies
- Use Turborepo's remote caching when available
- Implement proper change detection for CI/CD
- Follow established patterns for package publishing
